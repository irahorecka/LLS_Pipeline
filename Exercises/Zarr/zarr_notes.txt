HOW TO PIP INSTALL numcodecs WITHOUT WHEEL BUILD FAIL

$ pip install numcodecs==0.6.3
$ pip install numcodecs==0.6.3 zarr

NOTES:
	This problem is particular to OSX and Windows.
	With windows, you must install GCC compiler to access C extensions from sources, which includes the numcodecs.blosc module


INSTALLING GCC AND CLANG COMPILERS ON WINDOWS:
	https://preshing.com/20141108/how-to-install-the-latest-gcc-on-windows/
	2020-02-03: install gcc-9.2.0.tar.gz (released Nov 2019)
	after installation, compile cpp code like this:
		$ g++-9.2.0 --std=c++14 {}.cpp
		$ ./a.exe

	CUDA Toolkit has its own CUDA cpp compiler (nvcc)
		unsure if this is strictly for GPU or CPU/GPU compatible


ARTICLES DISCUSSING TIFF TO ZARR
1) Converting Whole Slide Images to OME-TIFF: A New Workflow
	https://www.glencoesoftware.com/blog/2019/12/09/converting-whole-slide-images-to-OME-TIFF.html
2) Implement ImageStack zarr saving and loading
	https://github.com/spacetx/starfish/issues/419
3) save napari to zarr file 
	https://github.com/napari/napari/issues/490
4!!) Load Large Image Data with Dask Array
	https://blog.dask.org/2019/06/20/load-image-data

GENERAL NOTES
- If you want to run a multi-processing task, you must run it in a .py file.
  Make sure to call the script and allocate tasks via multiprocessing in the conditional if __name__ == '__main__':
- Preferrably use Dask distributed to run parallel tasks (i.e. write to zarr files)
	- for this, use larger chunk size. allocating tasks to different workers has heavy overhead penalty.
	- e.g. prefer a 64 x 2 block (128 chunks) rather than 64 x 4 block (256 chunks) for writing.






